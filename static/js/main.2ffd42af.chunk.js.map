{"version":3,"sources":["Context.js","components/NoteInput.js","components/NoteOutput.js","App.js","index.js"],"names":["React","createContext","markdownTex","setMarkDownText","NoteInput","useContext","Context","markdownText","setMarkdownText","className","onChange","e","newValue","currentTarget","value","defaultValue","NoteOutput","source","App","useState","arr","setArr","toggle","setToggle","edit","setEdit","editId","setId","contextValue","useEffect","newArr","Object","entries","localStorage","forEach","key","unshift","id","text","getItem","Provider","type","onClick","setItem","genToken","Math","random","toString","substr","length","map","data","k","window","scrollTo","removeItem","handleDelete","confirm","clear","location","reload","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2ffd42af.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst defaultContext = {\r\n  markdownTex: \"\",\r\n  setMarkDownText: () => {},\r\n};\r\n\r\nexport default React.createContext(defaultContext);\r\n","import React, { useContext } from \"react\";\r\n\r\nimport Context from \"../Context\";\r\n\r\nimport \"./NoteInput.css\";\r\n\r\nconst NoteInput = () => {\r\n  const { markdownText, setMarkdownText } = useContext(Context);\r\n\r\n  const handleInputChange = (e) => {\r\n    const newValue = e.currentTarget.value;\r\n    setMarkdownText(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className=\"editor\">\r\n      <h2>Create a note</h2>\r\n      <textarea onChange={handleInputChange} defaultValue={markdownText} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoteInput;\r\n","import React, { useContext } from \"react\";\r\nimport ReactMarkdown from \"react-markdown\";\r\n\r\nimport Context from \"../Context\";\r\n\r\nimport \"./NoteOutput.css\";\r\n\r\nconst NoteOutput = () => {\r\n  const { markdownText } = useContext(Context);\r\n\r\n  return (\r\n    <div className=\"output\">\r\n      <h2>Preview</h2>\r\n      <div className=\"result\">\r\n        <ReactMarkdown source={markdownText} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoteOutput;\r\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\n\nimport NoteInput from \"./components/NoteInput\";\nimport NoteOutput from \"./components/NoteOutput\";\nimport Context from \"./Context\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [markdownText, setMarkdownText] = useState(\"\");\n  // Local data\n  const [arr, setArr] = useState(null);\n  const [toggle, setToggle] = useState(false);\n  const [edit, setEdit] = useState(false);\n  const [editId, setId] = useState(\"\");\n\n  const contextValue = {\n    markdownText,\n    setMarkdownText,\n  };\n\n  useEffect(() => {\n    const newArr = [];\n    Object.entries(localStorage).forEach(([key, value]) => {\n      newArr.unshift({\n        id: key,\n        text: value,\n      });\n    });\n    setArr(newArr);\n  }, []);\n\n  const token = () => {\n    return Math.random().toString(36).substr(2);\n  };\n\n  const handleSave = () => {\n    if (markdownText !== \"\" && !edit) {\n      const genToken = token();\n      localStorage.setItem(`data${genToken}`, markdownText);\n    } else if (edit) {\n      localStorage.setItem(`${editId}`, markdownText);\n\n      setId(\"\");\n      setEdit(false);\n    }\n\n    // Refresh local data to screen\n    const newArr = [];\n    Object.entries(localStorage).forEach(([key, value]) => {\n      newArr.unshift({\n        id: key,\n        text: value,\n      });\n    });\n    setArr(newArr);\n\n    setMarkdownText(\"\");\n    setToggle(!toggle);\n  };\n\n  const handleDelete = (id) => {\n    // DELETE CURRENT ITEM FROM ARRAY\n    localStorage.removeItem(id);\n\n    // Refresh local data to screen\n    const newArr = [];\n    Object.entries(localStorage).forEach(([key, value]) => {\n      newArr.unshift({\n        id: key,\n        text: value,\n      });\n    });\n    setArr(newArr);\n  };\n\n  const handleEdit = (id) => {\n    setEdit(true);\n\n    setMarkdownText(\"\");\n\n    setId(id);\n\n    window.scrollTo(0, 0);\n\n    setToggle(true);\n\n    //setMarkdownText(localStorage.getItem(editId));\n\n    //setToggle(true);\n  };\n\n  useEffect(() => {\n    setMarkdownText(localStorage.getItem(editId));\n  }, [editId]);\n\n  return (\n    <Context.Provider value={contextValue}>\n      <div className=\"App\">\n        <h1>Markdown Note App</h1>\n        <div className=\"note-container\">\n          {toggle ? (\n            <Fragment>\n              {/* {edit ? <NoteInput editInput={markdownText} /> : <NoteInput />} */}\n              <NoteInput />\n              <NoteOutput />\n              <button\n                className=\"btn-save success\"\n                type=\"button\"\n                onClick={handleSave}\n              >\n                Save / Close\n              </button>\n            </Fragment>\n          ) : (\n            <button\n              className=\"success\"\n              type=\"button\"\n              onClick={() => setToggle(!toggle)}\n            >\n              Create a note\n            </button>\n          )}\n        </div>\n        <section>\n          <h3>My notes</h3>\n          <div className=\"saved-notes\">\n            {localStorage.length > 0 && arr !== null ? (\n              arr.map((data, k) => (\n                <div key={k}>\n                  <div className=\"note\">\n                    <div className=\"x\">\n                      <button\n                        className=\"little edit\"\n                        type=\"button\"\n                        onClick={() => handleEdit(data.id)}\n                      >\n                        <i className=\"fas fa-edit\"></i>\n                      </button>\n                      <button\n                        className=\"little delete\"\n                        type=\"button\"\n                        onClick={() => handleDelete(data.id)}\n                      >\n                        <i className=\"far fa-trash-alt\"></i>\n                      </button>\n                    </div>\n                    <ReactMarkdown className=\"markdown\" source={data.text} />\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className=\"centered\">\n                <p>No saved notes</p>\n              </div>\n            )}\n          </div>\n        </section>\n        {localStorage.length > 1 && (\n          <button\n            className=\"danger\"\n            type=\"button\"\n            onClick={() => {\n              if (window.confirm(\"Are you sure?\")) {\n                localStorage.clear();\n                window.location.reload();\n              }\n            }}\n          >\n            Delete All\n          </button>\n        )}\n      </div>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}